--- /home/jtratt/s/Release.NetHack-NetHack-3.6.6_Released/src/pline.c	2020-03-08 12:29:31.000000000 -0500
+++ /home/jtratt/s/voice_Nethack_366/src/pline.c	2025-02-23 18:22:00.419894515 -0600
@@ -5,11 +5,64 @@
 
 #define NEED_VARARGS /* Uses ... */ /* comment line for pre-compiled headers */
 #include "hack.h"
+#include "flag.h"
+#include <regex.h>
+#include <string.h>
 
 #define BIGBUFSZ (5 * BUFSZ) /* big enough to format a 4*BUFSZ string (from
                               * config file parsing) with modest decoration;
                               * result will then be truncated to BUFSZ-1 */
 
+#ifdef VOICE_ENABLED
+#include "config.h"
+static void handle_voice_output(const char *message);
+static char *strip_patterns(const char *message);
+static void sanitize_message(const char *src, char *dest);
+#ifdef __linux__
+//#define TTS_CMD "/usr/bin/espeak"
+#define TTS_CMD "~/.local/bin/gtts-cli"
+#elif defined(_WIN32) || defined(_WIN64)
+#define TTS_CMD "powershell"
+#elif defined(__APPLE__) && defined(__MACH__)
+#define TTS_CMD "/usr/bin/say"
+#endif
+
+int check_command_available(const char *command_to_check) {
+    char check_command[256];
+    snprintf(check_command, sizeof(check_command), "command -v %s >/dev/null 2>&1 || { echo 'not found'; exit 1; }", command_to_check);
+
+    #ifdef _WIN32
+    snprintf(check_command, sizeof(check_command), "where %s >nul 2>nul && (echo found) || (echo not found)", command_to_check);
+    #endif
+
+    FILE *fp = popen(check_command, "r");
+    if (!fp) {
+        fprintf(stderr, "Failed to run command\n");
+        return 0;
+    }
+
+    char result[10];
+    if (fgets(result, sizeof(result), fp) != NULL) {
+        pclose(fp);
+        return strcmp(result, "not found\n") != 0;
+    }
+
+    pclose(fp);
+    return 0;
+}
+
+void check_tts_availability() {
+    if (!check_command_available(TTS_CMD)) {
+        fprintf(stderr, "\nVoice output is not available. Please ensure '%s' is installed:\n", TTS_CMD);
+        // Platform-specific installation instructions
+        fprintf(stderr, "Voice output has been disabled.\n\n");
+        flags.voice_enabled = 0; // Disable voice output at runtime if TTS not available
+    }
+}
+
+void check_tts_availability();
+#endif /* VOICE_ENABLED */
+
 static unsigned pline_flags = 0;
 static char prevmsg[BUFSZ];
 
@@ -210,6 +263,12 @@
 
     putmesg(line);
 
+#ifdef VOICE_ENABLED
+    if (flags.voice_enabled) {
+        handle_voice_output(line);
+    }
+#endif /* VOICE_ENABLED */
+
 #if defined(MSGHANDLER) && (defined(POSIX_TYPES) || defined(__GNUC__))
     execplinehandler(line);
 #endif
@@ -617,4 +676,161 @@
 #endif
 }
 
+#ifdef VOICE_ENABLED
+void handle_voice_output(const char *message) {
+    if (flags.voice_enabled) {
+    char sayit[BUFSZ * 2];
+    char escaped_message[BUFSZ * 2] = {0}; // Increased size to account for backslashes
+    int i, j = 0;
+
+    const char *stripped_message = strip_patterns(message);
+
+    // Escape double quotes in the stripped message
+    for (i = 0; stripped_message[i] != '\0' && j < sizeof(escaped_message) - 1; i++) {
+        if (stripped_message[i] == '"') {
+            escaped_message[j++] = '\\'; // Escape the quote
+        }
+        escaped_message[j++] = stripped_message[i];
+    }
+    escaped_message[j] = '\0'; // Null-terminate the string
+
+    regex_t regex;
+    int reti;
+    char msg[BUFSZ];
+    char rep[BUFSZ] = {0};
+    strncpy(msg, stripped_message, sizeof(msg) - 1); // Ensure null termination
+    msg[sizeof(msg) - 1] = '\0';
+
+    // Check VOICE_FORCE patterns first
+    struct voice_force *vf;
+    for (vf = forcelist; vf; vf = vf->next) {
+        regmatch_t pmatch[2]; // 2 for full match (0) and \1 (1)
+        reti = regcomp(&regex, vf->pattern, REG_EXTENDED); // Remove REG_NOSUB for capture groups
+        if (reti) {
+            pline("Could not compile VOICE_FORCE regex");
+            regfree(&regex);
+            return;
+        }
+
+        reti = regexec(&regex, msg, 2, pmatch, 0); // Capture up to 1 group
+        if (!reti) { // Match found in VOICE_FORCE
+            regfree(&regex);
+            // Proceed directly to voice output, skipping VOICE_EXCEPTION
+        if (vf->speak_text && strcmp(vf->speak_text, "\\1") == 0 && pmatch[1].rm_so != -1) {
+            // Extract and escape captured group \1
+            size_t len = pmatch[1].rm_eo - pmatch[1].rm_so;
+            char captured[BUFSZ];
+            strncpy(captured, msg + pmatch[1].rm_so, len);
+            captured[len] = '\0';
+            char escaped[BUFSZ * 2] = {0};
+            int k, m = 0;
+            for (k = 0; captured[k] && m < sizeof(escaped) - 1; k++) {
+                if (captured[k] == '"') escaped[m++] = '\\';
+                escaped[m++] = captured[k];
+            }
+            escaped[m] = '\0';
+            snprintf(sayit, sizeof(sayit), "%s %s \"%s\"", "/usr/bin/espeak", flags.voice_command, escaped);
+        } else if (vf->speak_text) {
+            // Use custom speak_text as-is (assumes no quotes needed escaping here)
+            snprintf(sayit, sizeof(sayit), "%s %s \"%s\"", "/usr/bin/espeak", flags.voice_command, vf->speak_text);
+        } else {
+            // Default to full message
+            snprintf(sayit, sizeof(sayit), "%s %s \"%s\"", "/usr/bin/espeak", flags.voice_command, escaped_message);
+        }
+            (void)system(sayit);
+            nh_flushinp();
+            return;
+        }
+        regfree(&regex);
+    }
+
+    // Check VOICE_EXCEPTION patterns (only if no VOICE_FORCE match)
+    // Compile the regex for voice exceptions
+    // Loop through all possible voice exceptions
+    struct voice_exception *ve;
+    for (ve = voicelist; ve; ve = ve->next) {
+        reti = regcomp(&regex, ve->pattern, REG_EXTENDED | REG_NOSUB);
+        if (reti) {
+            pline("Could not compile regex");
+            regfree(&regex);
+            return;
+        }
+
+        // Perform regex match
+        reti = regexec(&regex, msg, 0, NULL, 0);
+        if (!reti) { // Match found
+            //pline("exception");
+            regfree(&regex);
+            return; // Skip speaking if there's a match
+        }
+        regfree(&regex); // Free the compiled regex before moving to the next one
+    }
+    sanitize_message(escaped_message, rep);
+
+    #ifdef _WIN32
+        snprintf(sayit, sizeof(sayit), "%s -Command \"%s\"", TTS_CMD, TTS_FLAGS, rep);
+    #else
+        // gTTS yuck; too slow for me
+        //pline("%s \"%s\" %s", TTS_CMD, rep, flags.voice_command); // testing
+        // gTTS
+        // snprintf(sayit, sizeof(sayit), "%s \"%s\" %s", TTS_CMD, rep, flags.voice_command);
+        //
+        // espeak
+        //pline("%s %s \"%s\"", "/usr/bin/espeak", flags.voice_command, rep);
+        snprintf(sayit, sizeof(sayit), "%s %s \"%s\"", "/usr/bin/espeak", flags.voice_command, rep);
+    #endif
+    // If no exception was found, proceed with voice output
+    (void)system(sayit);
+    nh_flushinp();
+    }
+}
+
+char *strip_patterns(const char *message) {
+    static char result[BUFSZ];
+    regex_t regex;
+    regmatch_t pmatch[1];
+    const char *pattern = "\\[.*\\)|\\[.*\\]"; // matches "[...]" or "[...)" for input questions "[ynq] (n)"
+    char error_message[100];
+
+    // Compile the regex
+    int reti = regcomp(&regex, pattern, REG_EXTENDED);
+    if (reti) {
+        regerror(reti, &regex, error_message, sizeof(error_message));
+        snprintf(result, BUFSZ, "Error compiling regex: %s", error_message);
+        pline("%s",result);
+        return result;
+    }
+
+    // Copy the original message
+    strcpy(result, message);
+
+    // Try to match the pattern at the end of the string
+    if (regexec(&regex, result, 1, pmatch, 0) == 0) {
+        // If there's a match, truncate the string at the start of the match
+        result[pmatch[0].rm_so] = '\0';
+    }
+
+    // Clean up
+    regfree(&regex);
+    return result;
+}
+
+void sanitize_message(const char *src, char *dest) {
+    int i, j;
+    for (i = 0, j = 0; src[i] != '\0' && j < BUFSZ - 1; i++) {
+        if (/*(src[i] == '\'' || src[i] == '"' || src[i] == '`' ||
+            src[i] == '|' || src[i] == '>' || src[i] == '<' ||
+            src[i] == '(' || src[i] == ')' || src[i] == ';' || */
+            src[i] == '_') {
+            if (i < BUFSZ - 1) {
+                dest[j++] = ' ';
+            }
+        } else {
+            dest[j++] = src[i];
+        }
+    }
+    dest[j] = '\0';
+}
+#endif /* VOICE_ENABLED */
+
 /*pline.c*/
