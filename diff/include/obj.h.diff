--- /home/jtratt/s/Release.NetHack-NetHack-3.6.6_Released/include/obj.h	2020-03-08 12:29:31.000000000 -0500
+++ /home/jtratt/s/voice_Nethack_366/include/obj.h	2025-02-07 13:22:04.992594034 -0600
@@ -1,4 +1,4 @@
-/* NetHack 3.6	obj.h	$NHDT-Date: 1508827590 2017/10/24 06:46:30 $  $NHDT-Branch: NetHack-3.6.0 $:$NHDT-Revision: 1.60 $ */
+/* NetHack 3.6  obj.h   $NHDT-Date: 1508827590 2017/10/24 06:46:30 $  $NHDT-Branch: NetHack-3.6.0 $:$NHDT-Revision: 1.60 $ */
 /* Copyright (c) Stichting Mathematisch Centrum, Amsterdam, 1985. */
 /*-Copyright (c) Michael Allison, 2006. */
 /* NetHack may be freely redistributed.  See license for details. */
@@ -16,8 +16,8 @@
 };
 
 /****
- ***	oextra -- collection of all object extensions
- **	(see the note at the bottom of this file before adding oextra fields)
+ ***    oextra -- collection of all object extensions
+ ** (see the note at the bottom of this file before adding oextra fields)
  */
 struct oextra {
     char *oname;          /* ptr to name of object */
@@ -107,7 +107,12 @@
     Bitfield(bypass, 1); /* mark this as an object to be skipped by bhito() */
     Bitfield(cknown, 1); /* contents of container assumed to be known */
     Bitfield(lknown, 1); /* locked/unlocked status is known */
+#ifndef STICKY_OBJECTS
     /* 4 free bits */
+#else /* STICKY_OBJECTS */
+   Bitfield(sticky,1); /* "sticky" inventory slot */
+   /* 3 free bits */
+#endif
 
     int corpsenm;         /* type of corpse is mons[corpsenm] */
 #define leashmon corpsenm /* gets m_id of attached pet */
@@ -125,7 +130,7 @@
 #define newobj() (struct obj *) alloc(sizeof(struct obj))
 
 /***
- **	oextra referencing and testing macros
+ ** oextra referencing and testing macros
  */
 
 #define ONAME(o) ((o)->oextra->oname)
@@ -142,15 +147,15 @@
 
 /* Weapons and weapon-tools */
 /* KMH -- now based on skill categories.  Formerly:
- *	#define is_sword(otmp)	(otmp->oclass == WEAPON_CLASS && \
- *			 objects[otmp->otyp].oc_wepcat == WEP_SWORD)
- *	#define is_blade(otmp)	(otmp->oclass == WEAPON_CLASS && \
- *			 (objects[otmp->otyp].oc_wepcat == WEP_BLADE || \
- *			  objects[otmp->otyp].oc_wepcat == WEP_SWORD))
- *	#define is_weptool(o)	((o)->oclass == TOOL_CLASS && \
- *			 objects[(o)->otyp].oc_weptool)
- *	#define is_multigen(otyp) (otyp <= SHURIKEN)
- *	#define is_poisonable(otyp) (otyp <= BEC_DE_CORBIN)
+ *  #define is_sword(otmp)  (otmp->oclass == WEAPON_CLASS && \
+ *           objects[otmp->otyp].oc_wepcat == WEP_SWORD)
+ *  #define is_blade(otmp)  (otmp->oclass == WEAPON_CLASS && \
+ *           (objects[otmp->otyp].oc_wepcat == WEP_BLADE || \
+ *            objects[otmp->otyp].oc_wepcat == WEP_SWORD))
+ *  #define is_weptool(o)   ((o)->oclass == TOOL_CLASS && \
+ *           objects[(o)->otyp].oc_weptool)
+ *  #define is_multigen(otyp) (otyp <= SHURIKEN)
+ *  #define is_poisonable(otyp) (otyp <= BEC_DE_CORBIN)
  */
 #define is_blade(otmp)                           \
     (otmp->oclass == WEAPON_CLASS                \
@@ -241,6 +246,7 @@
      || (otmp)->otyp == DWARVISH_ROUNDSHIELD)
 #define is_gnomish_armor(otmp) (FALSE)
 
+
 /* Eggs and other food */
 #define MAX_EGG_HATCH_TIME 200 /* longest an egg can remain unhatched */
 #define stale_egg(egg) \
@@ -390,43 +396,43 @@
 /*
  *  Notes for adding new oextra structures:
  *
- *	 1. Add the structure definition and any required macros in an
+ *   1. Add the structure definition and any required macros in an
  *          appropriate header file that precedes this one.
- *	 2. Add a pointer to your new struct to oextra struct in this file.
- *	 3. Add a referencing macro to this file after the newobj macro above
- *	    (see ONAME, OMONST, OMIN, OLONG, or OMAILCMD for examples).
- *	 4. Add a testing macro after the set of referencing macros
- *	    (see has_oname(), has_omonst(), has_omin(), has_olong(),
- *	    has_omailcmd() for examples).
- *	 5. Create newXX(otmp) function and possibly free_XX(otmp) function
- *	    in an appropriate new or existing source file and add a prototype
- *	    for it to include/extern.h.  The majority of these are currently
- *	    located in mkobj.c for convenience.
+ *   2. Add a pointer to your new struct to oextra struct in this file.
+ *   3. Add a referencing macro to this file after the newobj macro above
+ *      (see ONAME, OMONST, OMIN, OLONG, or OMAILCMD for examples).
+ *   4. Add a testing macro after the set of referencing macros
+ *      (see has_oname(), has_omonst(), has_omin(), has_olong(),
+ *      has_omailcmd() for examples).
+ *   5. Create newXX(otmp) function and possibly free_XX(otmp) function
+ *      in an appropriate new or existing source file and add a prototype
+ *      for it to include/extern.h.  The majority of these are currently
+ *      located in mkobj.c for convenience.
  *
- *		void FDECL(newXX, (struct obj *));
- *	        void FDECL(free_XX, (struct obj *));
+ *      void FDECL(newXX, (struct obj *));
+ *          void FDECL(free_XX, (struct obj *));
  *
- *	          void
- *	          newxx(otmp)
- *	          struct obj *otmp;
- *	          {
- *	              if (!otmp->oextra) otmp->oextra = newoextra();
- *	              if (!XX(otmp)) {
- *	                  XX(otmp) = (struct XX *)alloc(sizeof(struct xx));
- *	                  (void) memset((genericptr_t) XX(otmp),
- *	                             0, sizeof(struct xx));
- *	              }
- *	          }
+ *            void
+ *            newxx(otmp)
+ *            struct obj *otmp;
+ *            {
+ *                if (!otmp->oextra) otmp->oextra = newoextra();
+ *                if (!XX(otmp)) {
+ *                    XX(otmp) = (struct XX *)alloc(sizeof(struct xx));
+ *                    (void) memset((genericptr_t) XX(otmp),
+ *                               0, sizeof(struct xx));
+ *                }
+ *            }
  *
- *	 6. Adjust size_obj() in src/cmd.c appropriately.
- *	 7. Adjust dealloc_oextra() in src/mkobj.c to clean up
- *	    properly during obj deallocation.
- *	 8. Adjust copy_oextra() in src/mkobj.c to make duplicate
- *	    copies of your struct or data onto another obj struct.
- *	 9. Adjust restobj() in src/restore.c to deal with your
- *	    struct or data during a restore.
- *	10. Adjust saveobj() in src/save.c to deal with your
- *	    struct or data during a save.
+ *   6. Adjust size_obj() in src/cmd.c appropriately.
+ *   7. Adjust dealloc_oextra() in src/mkobj.c to clean up
+ *      properly during obj deallocation.
+ *   8. Adjust copy_oextra() in src/mkobj.c to make duplicate
+ *      copies of your struct or data onto another obj struct.
+ *   9. Adjust restobj() in src/restore.c to deal with your
+ *      struct or data during a restore.
+ *  10. Adjust saveobj() in src/save.c to deal with your
+ *      struct or data during a save.
  */
 
 #endif /* OBJ_H */
